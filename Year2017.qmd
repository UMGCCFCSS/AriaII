---
format:
  dashboard:
    orientation: columns
    scrolling: true
---

```{r}
#| message: FALSE
library(dplyr)
library(purrr)
library(stringr)
library(plotly)
library(Luciernaga)
library(lubridate)

CSV <- data_path <-                                                
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "UMGCCFCSS", "InstrumentQC",                   
      "main", "data", "Aria", "Archive", "HolisticDataAria.csv",                              
      sep = "/"                                             
    ) 

TheList <- c("Aria")

Data <- read.csv(CSV, check.names=FALSE)
Data$DateTime <- lubridate::ymd_hms(Data$DateTime)
#tail(Data, 1)
```

```{r}
MaintenancePath <- data_path <-                                                
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "UMGCCFCSS", "InstrumentQC",                   
      "main", "AuroraMaintenance.csv",                              
      sep = "/"                                             
    )
Maintenance <- read.csv(MaintenancePath, check.names=FALSE)
Maintenance <- Maintenance %>% filter(!str_detect(reason, "lean"))
Maintenance <- Maintenance %>% filter(instrument %in% TheList)
```


```{r}
The2017 <- Data |> dplyr::filter(year(DateTime) == 2017)
```

## {.sidebar}
Dashboard contains historical data from **2017** for the **BDFACS Aria II**.

**First Column: MFI** Median Fluorescent Intensity (MFI) values for QC beads acquired Before and After QC. Measures stability over time. 

**Second Column: Gain** Gain (Voltage) values set for instrument after QC. Changes over time reflective of laser health. 

**Third Colum: RCV** Percentage change of Robust Coefficient Variation (RCV) after QC. Higher values reflect decreased resolution between positive and negative for that detector.

For additional information concerning individual parameter tabs, navigate to the [Help](https://umgccfcss.github.io/InstrumentQC/help) page.

**About**

This dashboard contains the visualized QC data for the Cytek and BD cytometers at the [UMGCC FCSS](https://www.medschool.umaryland.edu/cibr/core/umgccc_flow/)

For additional flow cytometry resources, visit our [website](https://sites.google.com/view/umgcccflow/home)

This dashboard was created with [Quarto](https://quarto.org/) and is maintained by [David Rach](https://github.com/DavidRach)

```{r}
x <- The2017
TheColumns <- x %>% select(where(~is.numeric(.)||is.integer(.))) %>% colnames()
TheColumns <- setdiff(TheColumns, "TIME")

# MFIs
TheIntermediate <- TheColumns[!str_detect(TheColumns, "Gain")]
TheIntermediate <- TheIntermediate[!str_detect(TheIntermediate, "rCV")]
TheColumnNames <- TheIntermediate[str_detect(TheIntermediate, "-A")]
  
VioletGains <- TheColumnNames[str_detect(TheColumnNames, "^V")]
BlueGains <- TheColumnNames[str_detect(TheColumnNames, "^B")]
YellowGreenGains <- TheColumnNames[str_detect(TheColumnNames, "^Y")]
RedGains <- TheColumnNames[str_detect(TheColumnNames, "^R")]

ScatterGains <- TheIntermediate[str_detect(TheIntermediate, "SC-")]
ScatterGains <- Luciernaga:::ScalePriority(ScatterGains)
LaserGains <- TheIntermediate[str_detect(TheIntermediate, "Laser")]
LaserGains <- Luciernaga:::ColorPriority(LaserGains)
ScalingGains <- TheIntermediate[str_detect(TheIntermediate, "Scaling")]
ScalingGains <- Luciernaga:::ColorPriority(ScalingGains)
OtherGains <- c(ScatterGains, LaserGains, ScalingGains)

VioletPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=VioletGains,
                      plotType = "individual", returntype = "plots",
                      Metadata="NULL", strict = TRUE, YAxisLabel = "MFI",
                      RepairVisits=Maintenance)

BluePlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=BlueGains,
                      plotType = "individual", returntype = "plots",
                      Metadata=NULL, strict = TRUE, YAxisLabel = "MFI",
                      RepairVisits=Maintenance)

YellowGreenPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=YellowGreenGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = "MFI",
                     RepairVisits=Maintenance)                      

RedPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=RedGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = "MFI",
                     RepairVisits=Maintenance)

ScatterPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScatterGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = " ",
                     RepairVisits=Maintenance)

LaserPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=LaserGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = " ",
                     RepairVisits=Maintenance)
```

```{r}
TheColumns <- x %>% select(where(~is.numeric(.)||is.integer(.))) %>% colnames()
TheColumns <- setdiff(TheColumns, "TIME")

# RCVs
TheIntermediate <- TheColumns[!str_detect(TheColumns, "Gain")]
TheIntermediate <- TheIntermediate[str_detect(TheIntermediate, "rCV")]
TheColumnNames <- TheIntermediate[str_detect(TheIntermediate, "-A")]
  
VioletGains <- TheColumnNames[str_detect(TheColumnNames, "^V")]
BlueGains <- TheColumnNames[str_detect(TheColumnNames, "^B")]
YellowGreenGains <- TheColumnNames[str_detect(TheColumnNames, "^Y")]
RedGains <- TheColumnNames[str_detect(TheColumnNames, "^R")]

ScatterGains <- TheIntermediate[str_detect(TheIntermediate, "SC-")]
ScatterGains <- Luciernaga:::ScalePriority(ScatterGains)
LaserGains <- TheIntermediate[str_detect(TheIntermediate, "Laser")]
LaserGains <- Luciernaga:::ColorPriority(LaserGains)
ScalingGains <- TheIntermediate[str_detect(TheIntermediate, "Scaling")]
ScalingGains <- Luciernaga:::ColorPriority(ScalingGains)
OtherGains <- c(ScatterGains, LaserGains, ScalingGains)

VioletPlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=VioletGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "%rCV",
                      RepairVisits=Maintenance)

BluePlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=BlueGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "%rCV",
                      RepairVisits=Maintenance)

YellowGreenPlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=YellowGreenGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "%rCV",
                      RepairVisits=Maintenance)

RedPlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=RedGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = "%rCV",
                     RepairVisits=Maintenance)

ScatterPlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScatterGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=Maintenance)
```

```{r}
TheColumns <- x %>% select(where(~is.numeric(.)||is.integer(.))) %>% colnames()
TheColumns <- setdiff(TheColumns, "TIME")

# Gains
TheColumnNames <- TheColumns[str_detect(TheColumns, "Gain")]
TheColumnNames <- TheColumnNames[str_detect(TheColumnNames, "-A")]

VioletGains <- TheColumnNames[str_detect(TheColumnNames, "^V")]
BlueGains <- TheColumnNames[str_detect(TheColumnNames, "^B")]
YellowGreenGains <- TheColumnNames[str_detect(TheColumnNames, "^Y")]
RedGains <- TheColumnNames[str_detect(TheColumnNames, "^R")]

ScatterGains <- TheColumnNames[str_detect(TheColumnNames, "SC-")]
ScatterGains <- Luciernaga:::ScalePriority(ScatterGains)
LaserGains <- TheColumns[str_detect(TheColumns, "Laser")]
LaserGains <- Luciernaga:::ColorPriority(LaserGains)
ScalingGains <- TheColumns[str_detect(TheColumns, "Scaling")]
ScalingGains <- Luciernaga:::ColorPriority(ScalingGains)
OtherGains <- c(ScatterGains, LaserGains, ScalingGains)

VioletPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=VioletGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "Gain",
                      RepairVisits=Maintenance)

BluePlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=BlueGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "Gain",
                      RepairVisits=Maintenance)

YellowGreenPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=YellowGreenGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = "Gain",
                     RepairVisits=Maintenance)


RedPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=RedGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = "Gain",
                     RepairVisits=Maintenance)

ScatterPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScatterGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=Maintenance)

LaserPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=LaserGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=Maintenance)

ScalingPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScalingGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=Maintenance)
```

```{r}
#| include: false
#| echo: false
PDFPlots <- c(VioletPlotsMFI, BluePlotsMFI, YellowGreenPlotsMFI, RedPlotsMFI, ScatterPlotsMFI, VioletPlotsGain, BluePlotsGain, YellowGreenPlotsGain, RedPlotsGain, ScatterPlotsGain, LaserPlotsGain, ScalingPlotsGain, VioletPlotsRCV, BluePlotsRCV, YellowGreenPlotsRCV, RedPlotsRCV, ScatterPlotsRCV)

Filename <- paste0("Historical_AriaII_2017")

MainFolder <- getwd()
MainFolder <- file.path(MainFolder, "data")

PDF <- Utility_Patchwork(x=PDFPlots, filename=Filename, returntype="pdf", outfolder=MainFolder, thecolumns=1)

CSVname <- paste0("Historical_AriaII_2017.csv")
SaveHere <- file.path(MainFolder, CSVname)
write.csv(The2017, SaveHere, row.names=FALSE)
```

## MFI {.tabset}

```{r}
#| title: Violet
ggplotly(VioletPlotsMFI[[1]])
ggplotly(VioletPlotsMFI[[2]])
ggplotly(VioletPlotsMFI[[3]])
```

```{r}
#| title: Blue
ggplotly(BluePlotsMFI[[1]])
ggplotly(BluePlotsMFI[[2]])
```

```{r}
#| title: YellowGreen
ggplotly(YellowGreenPlotsMFI[[1]])
ggplotly(YellowGreenPlotsMFI[[2]])
ggplotly(YellowGreenPlotsMFI[[3]])
ggplotly(YellowGreenPlotsMFI[[4]])
```

```{r}
#| title: Red
ggplotly(RedPlotsMFI[[1]])
ggplotly(RedPlotsMFI[[2]])
```

```{r}
#| title: Scatter
ggplotly(ScatterPlotsMFI[[1]])
ggplotly(ScatterPlotsMFI[[2]])
ggplotly(ScatterPlotsMFI[[3]])
ggplotly(ScatterPlotsMFI[[4]])
ggplotly(ScatterPlotsMFI[[5]])
ggplotly(ScatterPlotsMFI[[6]])
```

```{r}
#| title: LaserDelay
ggplotly(LaserPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
ggplotly(LaserPlotsGain[[3]])
ggplotly(LaserPlotsGain[[4]])
```

```{r}
#| title: LaserScaling
ggplotly(ScalingPlotsGain[[1]])
ggplotly(ScalingPlotsGain[[2]])
ggplotly(ScalingPlotsGain[[3]])
ggplotly(ScalingPlotsGain[[4]])
```

## Gain {.tabset}

```{r}
#| title: Violet
ggplotly(VioletPlotsGain[[1]])
ggplotly(VioletPlotsGain[[2]])
ggplotly(VioletPlotsGain[[3]])
```

```{r}
#| title: Blue
ggplotly(BluePlotsGain[[1]])
ggplotly(BluePlotsGain[[2]])
```

```{r}
#| title: YellowGreen
ggplotly(YellowGreenPlotsGain[[1]])
ggplotly(YellowGreenPlotsGain[[2]])
ggplotly(YellowGreenPlotsGain[[3]])
ggplotly(YellowGreenPlotsGain[[4]])
```

```{r}
#| title: Red
ggplotly(RedPlotsGain[[1]])
ggplotly(RedPlotsGain[[2]])
```

```{r}
#| title: Scatter
ggplotly(ScatterPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
ggplotly(LaserPlotsGain[[2]])
ggplotly(ScatterPlotsGain[[2]])
ggplotly(LaserPlotsGain[[2]])
ggplotly(LaserPlotsGain[[2]])
```

```{r}
#| title: LaserDelay
ggplotly(LaserPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
ggplotly(LaserPlotsGain[[3]])
ggplotly(LaserPlotsGain[[4]])
```

```{r}
#| title: LaserScaling
ggplotly(ScalingPlotsGain[[1]])
ggplotly(ScalingPlotsGain[[2]])
ggplotly(ScalingPlotsGain[[3]])
ggplotly(ScalingPlotsGain[[4]])
```

## rCV {.tabset}

```{r}
#| title: Violet
ggplotly(VioletPlotsRCV[[1]])
ggplotly(VioletPlotsRCV[[2]])
ggplotly(VioletPlotsRCV[[3]])
```

```{r}
#| title: Blue
ggplotly(BluePlotsRCV[[1]])
ggplotly(BluePlotsRCV[[2]])
```

```{r}
#| title: YellowGreen
ggplotly(YellowGreenPlotsRCV[[1]])
ggplotly(YellowGreenPlotsRCV[[2]])
ggplotly(YellowGreenPlotsRCV[[3]])
ggplotly(YellowGreenPlotsRCV[[4]])
```

```{r}
#| title: Red
ggplotly(RedPlotsRCV[[1]])
ggplotly(RedPlotsRCV[[2]])
```

```{r}
#| title: Scatter
ggplotly(ScatterPlotsRCV[[1]])
ggplotly(ScatterPlotsRCV[[2]])
ggplotly(ScatterPlotsRCV[[3]])
ggplotly(ScatterPlotsRCV[[4]])
ggplotly(ScatterPlotsRCV[[5]])
ggplotly(ScatterPlotsRCV[[6]])
```

```{r}
#| eval: TRUE
#| title: LaserPower
ggplotly(LaserPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
ggplotly(LaserPlotsGain[[3]])
ggplotly(LaserPlotsGain[[4]])
```

```{r}
#| title: LaserScaling
ggplotly(ScalingPlotsGain[[1]])
ggplotly(ScalingPlotsGain[[2]])
ggplotly(ScalingPlotsGain[[3]])
ggplotly(ScalingPlotsGain[[4]])
```



